{
  "schemaVersion": "2.2",
  "description": "Remove old kernels, retaining the latest two (including the currently running one), clean up associated files, update GRUB, and log disk space usage. Supports dry run with DRY_RUN=1 environment variable.",
  "parameters": {
    "DRY_RUN": {
      "type": "String",
      "description": "Set to 1 to simulate removal without making changes.",
      "default": "0",
      "allowedValues": ["0", "1"]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "RemoveOldKernels",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Exit on any error",
          "set -e",
          "trap 'echo [$(date \"+%Y-%m-%d %H:%M:%S\")] Error: Script exited unexpectedly' ERR",
          "",
          "# Initialize logging",
          "LOG_FILE=/var/log/remove_old_kernels.log",
          "exec 1>>$LOG_FILE 2>&1",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Starting kernel cleanup\"",
          "",
          "# Check if running as root",
          "if [ \"$EUID\" -ne 0 ]; then",
          "  echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Error: This script must be run as root\"",
          "  exit 1",
          "fi",
          "",
          "# Log current kernel",
          "current_kernel=$(uname -r)",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Current kernel: $current_kernel\"",
          "",
          "# Log disk usage before cleanup",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Disk usage before cleanup:\"",
          "df -h /boot",
          "",
          "# Get list of installed kernels (sorted by version)",
          "installed_kernels=$(rpm -q kernel | sort -V) || { echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Error: Failed to list kernels\"; exit 1; }",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Installed kernels:\"",
          "echo \"$installed_kernels\"",
          "",
          "# Check if there are 2 or fewer kernels",
          "kernel_count=$(echo \"$installed_kernels\" | wc -l)",
          "if [ \"$kernel_count\" -le 2 ]; then",
          "  echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Fewer than or equal to 2 kernels installed ($kernel_count). No action needed.\"",
          "  echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Disk usage after check:\"",
          "  df -h /boot",
          "  exit 0",
          "fi",
          "",
          "# Determine kernels to keep (current kernel + most recent other kernel)",
          "kernels_to_keep=$(echo \"$installed_kernels\" | grep \"$current_kernel\")",
          "latest_other_kernel=$(echo \"$installed_kernels\" | grep -v \"$current_kernel\" | tail -n 1)",
          "if [ -n \"$latest_other_kernel\" ]; then",
          "  kernels_to_keep=\"$kernels_to_keep\\n$latest_other_kernel\"",
          "fi",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Kernels to keep:\"",
          "echo \"$kernels_to_keep\"",
          "",
          "# Check for dry run",
          "if [ \"{{DRY_RUN}}\" = \"1\" ]; then",
          "  echo \"[$(date '+%Y-%m-%d %H:%M:%S')] DRY RUN: No kernels will be removed\"",
          "fi",
          "",
          "# Remove old kernels",
          "for kernel in $installed_kernels; do",
          "  if ! echo \"$kernels_to_keep\" | grep -q \"$kernel\"; then",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Processing kernel: $kernel\"",
          "    if [ \"{{DRY_RUN}}\" = \"1\" ]; then",
          "      echo \"[$(date '+%Y-%m-%d %H:%M:%S')] DRY RUN: Would remove kernel: $kernel\"",
          "    else",
          "      echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Removing kernel: $kernel\"",
          "      yum remove -y \"$kernel\" || { echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Error: Failed to remove $kernel\"; exit 1; }",
          "    fi",
          "  else",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Retaining kernel: $kernel\"",
          "  fi",
          "done",
          "",
          "# Update GRUB configuration",
          "if [ \"{{DRY_RUN}}\" != \"1\" ]; then",
          "  echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Updating GRUB configuration\"",
          "  grub2-mkconfig -o /boot/grub2/grub.cfg || { echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Error: Failed to update GRUB\"; exit 1; }",
          "else",
          "  echo \"[$(date '+%Y-%m-%d %H:%M:%S')] DRY RUN: Would update GRUB configuration\"",
          "fi",
          "",
          "# Log disk usage after cleanup",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Disk usage after cleanup:\"",
          "df -h /boot",
          "",
          "# Log completion",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Kernel cleanup completed successfully\""
        ]
      }
    }
  ]
}
