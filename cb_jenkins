stage('Wait for CodeBuild and Print Logs') {
    steps {
        script {
            def buildId = env.CODEBUILD_BUILD_ID  // Or set manually if needed
            if (!buildId) {
                error "CODEBUILD_BUILD_ID is not set."
            }

            echo "Waiting for CodeBuild to complete: ${buildId}"

            // Wait for build to finish
            def status = ""
            while (true) {
                status = sh(
                    script: "aws codebuild batch-get-builds --ids ${buildId} --query 'builds[0].buildStatus' --output text",
                    returnStdout: true
                ).trim()

                echo "CodeBuild Status: ${status}"

                if (status in ["SUCCEEDED", "FAILED", "FAULT", "TIMED_OUT", "STOPPED"]) {
                    break
                }

                sleep(time: 10, unit: 'SECONDS')
            }

            // Get log group and stream
            def logInfo = sh(
                script: "aws codebuild batch-get-builds --ids ${buildId} --query 'builds[0].logs.[groupName, streamName]' --output text",
                returnStdout: true
            ).trim().split()
            def logGroup = logInfo[0]
            def logStream = logInfo[1]

            echo "Fetching logs from: ${logGroup} / ${logStream}"

            def logs = sh(
                script: """
                    aws logs get-log-events \
                        --log-group-name "${logGroup}" \
                        --log-stream-name "${logStream}" \
                        --output text \
                        --query 'events[*].message'
                """,
                returnStdout: true
            ).trim()

            echo "===== CodeBuild Logs ====="
            echo logs

            if (status != "SUCCEEDED") {
                error "CodeBuild failed with status: ${status}"
            }
        }
    }
}
