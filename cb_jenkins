stage('Stream CodeBuild Logs in Real-Time') {
    steps {
        script {
            def buildId = env.CODEBUILD_BUILD_ID  // Or pass manually
            if (!buildId) {
                error "CODEBUILD_BUILD_ID is not set."
            }

            echo "Waiting for CodeBuild build to complete and streaming logs: ${buildId}"

            // Get log group and stream name
            def logInfo = sh(
                script: "aws codebuild batch-get-builds --ids ${buildId} --query 'builds[0].logs.[groupName, streamName]' --output text",
                returnStdout: true
            ).trim().split()
            def logGroup = logInfo[0]
            def logStream = logInfo[1]

            def nextToken = ""
            def buildFinished = false

            while (!buildFinished) {
                // Fetch current build status
                def status = sh(
                    script: "aws codebuild batch-get-builds --ids ${buildId} --query 'builds[0].buildStatus' --output text",
                    returnStdout: true
                ).trim()

                // Get new log events with pagination
                def logCmd = "aws logs get-log-events --log-group-name '${logGroup}' --log-stream-name '${logStream}'"
                if (nextToken) {
                    logCmd += " --next-token '${nextToken}'"
                }
                logCmd += " --output json"

                def result = sh(script: logCmd, returnStdout: true).trim()
                def parsed = readJSON text: result

                parsed.events.each { event ->
                    echo event.message.trim()
                }

                def newToken = parsed.nextForwardToken
                buildFinished = (status in ["SUCCEEDED", "FAILED", "FAULT", "TIMED_OUT", "STOPPED"])

                // Only update token if new logs appeared
                if (newToken != nextToken) {
                    nextToken = newToken
                } else {
                    sleep(time: 5, unit: 'SECONDS')
                }

                if (buildFinished) {
                    echo "Build finished with status: ${status}"
                    if (status != "SUCCEEDED") {
                        error "CodeBuild failed with status: ${status}"
                    }
                }
            }
        }
    }
}
